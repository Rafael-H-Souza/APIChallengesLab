name: CD (Docker Compose)

on:
  push:
    branches: [ "main" ]   

concurrency:
  group: cd-${{ github.ref }}
  cancel-in-progress: false

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: rafaelsouzaio/api-logistica
    outputs:
      sha_tag: ${{ steps.sha_tag.outputs.tag }}
      image_name: ${{ env.IMAGE_NAME }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker meta (tags/labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=sha,format=short
            type=ref,event=tag

      - name: Set up QEMU (multi-arch opcional)
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build & Push (with cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64 
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE_NAME }}:buildcache,mode=max

      - name: Pick SHA tag
        id: sha_tag
        run: |
          T="$(echo '${{ steps.meta.outputs.tags }}' | tr ' ' '\n' | grep -E ':[0-9a-f]{7}$' | head -n1 | cut -d: -f2)"
          echo "tag=${T:-latest}" >> "$GITHUB_OUTPUT"

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -euo pipefail
            cd /apps/minha-api

            IMAGE="${{ needs.build-and-push.outputs.image_name }}"
            TAG="${{ needs.build-and-push.outputs.sha_tag }}"

            echo "Deploying $IMAGE:$TAG"

            # garante .env com IMAGE/TAG para o docker compose
            touch .env
            if grep -q '^IMAGE=' .env; then
              sed -i "s|^IMAGE=.*$|IMAGE=$IMAGE|" .env
            else
              echo "IMAGE=$IMAGE" >> .env
            fi
            if grep -q '^TAG=' .env; then
              sed -i "s|^TAG=.*$|TAG=$TAG|" .env
            else
              echo "TAG=$TAG" >> .env
            fi

            if [ -n "${{ secrets.DOCKER_USERNAME }}" ]; then
              echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            fi

            # pull e sobe com compose v2
            docker compose --env-file .env pull
            docker compose --env-file .env up -d --remove-orphans

            # limpeza b√°sica
            docker image prune -f
